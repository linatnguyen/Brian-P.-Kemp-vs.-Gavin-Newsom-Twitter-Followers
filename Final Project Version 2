{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "951ba5f5",
   "metadata": {},
   "source": [
    "# Project\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e809b71b",
   "metadata": {},
   "source": [
    "Your final project encompasses all major aspects of the course and of text-mining projects you will encounter after school. You will begin by acquiring data yourself. By module six you are asked to have that data cleaned, tokenized, normalized, and you will calculate descriptive statistics on your corpus. You are expected to acquire your data via an API or via web scraping. \n",
    "\n",
    "You should find a data set that is grouped or that can be classified via topic modeling. The steps of your final project will vary depending on whether or not your data are grouped.\n",
    "\n",
    "If your data is grouped, then you will begin by building a classification model and reporting the accuracy of your model against a hold-out test set. Then you will ignore the groups and build a topic model such as NMF, LSA, or LDA to put the data into groups. You will then compare how well those topics agree with the a priori groups. \n",
    "\n",
    "If your data is not grouped, then your steps are reversed. You will begin by building a topic model. You will adjust that model as necessary until you feel satisfied with the topics discovered. Subset your data to the topics you feel most comfortable with, and use that resulting data set to build a classification model. Once again, report the accuracy of your classification model against a hold-out test set. \n",
    "\n",
    "Final projects and datasets from prior courses cannot be used. It is required that you and your team use GitHub as a code hosting platform to manage version control and collaboration during this project. It is also necessary to create and add a README file to your GitHub repository.\n",
    "Project Timeline:\n",
    "\n",
    "    Module 1 (by the end of Week 1): You signed up for your Final Team Project group in Blackboard. Each team has two or three members.\n",
    "    Module 4 (by the end of Week 4): Each team selected and introduced a dataset. The team representative submitted the \"Team Project Status Update Form\" in Assignment 4.2.\n",
    "    Module 6 (by the end of Week 6): Each team submitted descriptive statistics on your clean, tokenized, and normalized data in Assignment 6.2.\n",
    "    Module 7 (by the end of Week 7): Each team will submit the following deliverables for the course project in the final week. The final project has two options for submission detailed below. \n",
    "\n",
    "Final Team Project Options:\n",
    "Option 1: Presentations\n",
    "If your team chooses this option, you must submit the deliverables outlined below.\n",
    "\n",
    "    Videos: Two videos, one under 20 minutes and one with six or fewer slides. These videos should be done by all team members.\n",
    "        Video 1: Technical (peer data scientists) - This video should be a detailed technical presentation of what you have done. The recording of this presentation should be shorter than 20 minutes, but the format is up to you. Someone viewing your presentation should know all of the work you have done and the results of your analysis. Your imagined audience for this presentation should be other data scientists. Do not assume they are fully conversant with the topics of this course, but you can assume familiarity with concepts in statistics, machine learning, and analytics.\n",
    "        Video 2: Non-Technical (Business Executive) - This presentation should be short (5 or 6 slides) and does not need extensive introduction or conclusions. This presentation is the sort that you would share with colleagues for incorporation into a larger presentation for something like a Quarterly Business Review for a non-technical audience. Include one or two slides on both your classification and your topic models, as well as a discussion of potential applications or next steps.\n",
    "    Technical Notebook: One PDF document of your technical notebook containing your project code with thorough code notation and explanations of approach, code output, interpretation of your code output, and actionable insight recommendations and recommended next steps.\n",
    "    GitHub Repository: Containing your project technical notebook(s) that demonstrates team collaboration. In your final technical notebook submitted on Blackboard, include a link to your GitHub repository.\n",
    "    Presentation (PowerPoint/Others): Submit your slide presentations for both presentations.\n",
    "\n",
    "Option 2: Application\n",
    "If your team chooses this option, you must submit the deliverables outlined below.\n",
    "\n",
    "    Application: Your second option is to produce an application, using Flask, that implements your classification model. Your application should allow users to drop in text and have it classified. If possible, include additional information such as the specific words that are most responsible for determining the classification. Include a tab that provides an overview of your topic model, but that portion of the application need not be interactive.\n",
    "    GitHub Repository: Containing your project technical notebook(s) that demonstrates team collaboration. In your final technical notebook submitted on Blackboard, include a link to your GitHub repository.\n",
    "    Video: In addition to submitting the link to the application, record an introductory screen share. This screen share should provide an overview of your application and illustrate its use. This screen share should be shorter than 10 minutes.\n",
    "    Technical Notebook: One PDF document of your technical notebook containing your project code with thorough code notation and explanations of approach, code output, interpretation of your code output, and actionable insight recommendations and recommended next steps.\n",
    "\n",
    "It is critical to note that no extensions will be given for any of the final projects due dates for any reason, and final projects submitted after the final due date will not be graded.\n",
    "Project Datasets:\n",
    "You will be responsible for gathering the data set for this project either from an API or via Web Scraping. Both of those approaches can be rate limited, so make sure to give yourself enough time to assemble the data. Include your data pulling notebook or notebooks in your repository.\n",
    "Requirements:\n",
    "Divide the work equally between the team members and ensure that everyone writes to code. You are expected to write high-quality, efficient, and readable code in Python. Regardless of the option you choose you should submit your repository that includes all code used in the project and a README\n",
    "\n",
    "    Include a link to your repository in your submission.\n",
    "\n",
    "Option 1 (Presentations) Requirements:\n",
    "\n",
    "    Give a 15-20 minute technical presentation covering your project.\n",
    "        The clearly defined problem statement and data description\n",
    "        Tokenization and normalization choices\n",
    "        Descriptive statistics\n",
    "        Overview of your classification model\n",
    "        Overview of your topic model\n",
    "        Estimates of performance for both models\n",
    "        Results\n",
    "        Discussion and conclusion\n",
    "        Your audience for this video is your data science peers/technical audience with knowledge of data science methods and techniques, but with only a rudimentary understanding of text mining and NLP.\n",
    "    Give a short presentation with six or fewer slides covering your project for a non-technical audience. Order the topic model and classification slides in a sensible way given your data.\n",
    "        One or two slides giving an overview of your project and data\n",
    "        One or two slides on your topic model\n",
    "        One or two slides on your classification model\n",
    "        One slide on next steps\n",
    "\n",
    "Option 2 (Application) Requirements:\n",
    "\n",
    "    URL for your application: Include a web location where your instructor can interact with your application.\n",
    "    Video screen share: record an introductory screen share. This screen share should provide an overview of your application and illustrate its use. This screen share should be shorter than 10 minutes.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "064e1192",
   "metadata": {},
   "source": [
    "# Twitter API Pull"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "62ce3666",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for the twitter section\n",
    "import tweepy\n",
    "import os\n",
    "import datetime\n",
    "import re\n",
    "from pprint import pprint\n",
    "\n",
    "# for the lyrics scrape section\n",
    "import requests\n",
    "import time\n",
    "from bs4 import BeautifulSoup\n",
    "from collections import defaultdict, Counter\n",
    "\n",
    "import os\n",
    "import re\n",
    "import emoji\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from collections import Counter, defaultdict\n",
    "from nltk.corpus import stopwords\n",
    "from string import punctuation\n",
    "\n",
    "sw = stopwords.words(\"english\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c56ff7c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use this cell for any import statements you add\n",
    "# import api_keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "67576c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/linanguyen/ADS 509 '"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3758c3d3",
   "metadata": {},
   "source": [
    "We need bring in our API keys. Since API keys should be kept secret, we'll keep them in a file called `api_keys.py`. This file should be stored in the directory where you store this notebook. The example file is provided for you on Blackboard. The example has API keys that are _not_ functional, so you'll need to get Twitter credentials and replace the placeholder keys. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4e5729ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "api_key='LUKbDXuSS6Z8tZoYvHtyS0OPk'\n",
    "api_key_secret= 'dS9w5HSHhAAgEHrJPmnIiizEytWiGYITnxJkx1BeGfYJdeDyx1'\n",
    "access_token= '1524139829268664321-7ftbINxgsCgcYUANOQJHDi4LzFLaQb'\n",
    "access_token_secret= 'aZJ2tRZuc0RU4qUeCGEMkEty0GGoRCSeUSqMJY8H9Tp1e'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d7a8f670",
   "metadata": {},
   "outputs": [],
   "source": [
    "auth = tweepy.AppAuthHandler(api_key, api_key_secret)\n",
    "api = tweepy.API(auth,wait_on_rate_limit = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "28374688",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_data = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "75621e31",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets = api.user_timeline(screen_name=\"briankempga\", count=200, tweet_mode='extended')\n",
    "all_tweets = []\n",
    "all_tweets.extend(tweets)\n",
    "oldest_id = tweets[-1].id\n",
    "while True:\n",
    "    tweets = api.user_timeline(screen_name=\"briankempga\", count=200,\n",
    "     max_id = oldest_id - 1,\n",
    "     tweet_mode='extended')\n",
    "    if len(tweets) == 0:\n",
    "        break\n",
    "    oldest_id = tweets[-1].id\n",
    "    all_tweets.extend(tweets)\n",
    "tweet_data[\"briankempga\"] = all_tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9d91027b",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets = api.user_timeline(screen_name=\"gavinnewsom\", count=200, tweet_mode='extended')\n",
    "all_tweets = []\n",
    "all_tweets.extend(tweets)\n",
    "oldest_id = tweets[-1].id\n",
    "while True:\n",
    "    tweets = api.user_timeline(screen_name=\"gavinnewsom\", count=200,\n",
    "     max_id = oldest_id - 1,\n",
    "     tweet_mode='extended')\n",
    "    if len(tweets) == 0:\n",
    "        break\n",
    "    oldest_id = tweets[-1].id\n",
    "    all_tweets.extend(tweets)\n",
    "tweet_data[\"gavinnewsom\"] = all_tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4433d53d",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = []\n",
    "for key, val in tweet_data.items():\n",
    "    for item in val:\n",
    "        res.append([key, item.full_text])\n",
    "df = pd.DataFrame(res, columns=['id', 'text'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f664f36e",
   "metadata": {},
   "source": [
    "First we extract the last 3000 tweets of two governers. Then we use a classification model to predict the owner of tweet from the tweet by using NLP and modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fe008426",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>For years, Stacey Abrams has been aligned with...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>We had a great crowd at our lunch in Winder to...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>RT @GovKemp: https://t.co/YMNGbJKgQq</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>RT @TeamKempGA: ICYMI: Watch the latest ad fro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>Stacey Abrams was paid $52,500 to serve on the...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               text\n",
       "0  briankempga  For years, Stacey Abrams has been aligned with...\n",
       "1  briankempga  We had a great crowd at our lunch in Winder to...\n",
       "2  briankempga               RT @GovKemp: https://t.co/YMNGbJKgQq\n",
       "3  briankempga  RT @TeamKempGA: ICYMI: Watch the latest ad fro...\n",
       "4  briankempga  Stacey Abrams was paid $52,500 to serve on the..."
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3db949c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_text(txt):\n",
    "    if type(txt) != str:\n",
    "        return \"\"\n",
    "    txt = txt.lower()\n",
    "    txt = re.sub('@[A-Za-z0-9_]+', '', txt)\n",
    "    txt = re.sub('#[A-Za-z0-9_]+', '', txt)\n",
    "    txt = re.sub(r'http\\S+', '', txt)\n",
    "    txt = txt.replace('\\n', ' ')\n",
    "    txt = re.sub('\\s+', ' ', txt)\n",
    "    txt = re.sub('[^a-z\\s]','', txt)\n",
    "    return txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "250630c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['clean_text'] = df['text'].apply(clean_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e6c87ad2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>text</th>\n",
       "      <th>clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>For years, Stacey Abrams has been aligned with...</td>\n",
       "      <td>for years stacey abrams has been aligned with ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>We had a great crowd at our lunch in Winder to...</td>\n",
       "      <td>we had a great crowd at our lunch in winder to...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>RT @GovKemp: https://t.co/YMNGbJKgQq</td>\n",
       "      <td>rt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>RT @TeamKempGA: ICYMI: Watch the latest ad fro...</td>\n",
       "      <td>rt  icymi watch the latest ad from our campaig...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>briankempga</td>\n",
       "      <td>Stacey Abrams was paid $52,500 to serve on the...</td>\n",
       "      <td>stacey abrams was paid  to serve on the board ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               text  \\\n",
       "0  briankempga  For years, Stacey Abrams has been aligned with...   \n",
       "1  briankempga  We had a great crowd at our lunch in Winder to...   \n",
       "2  briankempga               RT @GovKemp: https://t.co/YMNGbJKgQq   \n",
       "3  briankempga  RT @TeamKempGA: ICYMI: Watch the latest ad fro...   \n",
       "4  briankempga  Stacey Abrams was paid $52,500 to serve on the...   \n",
       "\n",
       "                                          clean_text  \n",
       "0  for years stacey abrams has been aligned with ...  \n",
       "1  we had a great crowd at our lunch in winder to...  \n",
       "2                                               rt    \n",
       "3  rt  icymi watch the latest ad from our campaig...  \n",
       "4  stacey abrams was paid  to serve on the board ...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2a4ccbe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, ENGLISH_STOP_WORDS\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "68ce0719",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gavinnewsom    3249\n",
       "briankempga    3247\n",
       "Name: id, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e19b34c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4547, 2), (1949, 2))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train, test = train_test_split(df[['id', 'clean_text']], test_size=0.3,shuffle=True, random_state=123)\n",
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "472e7c01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove the word which can leak some information about the tweet owner\n",
    "mystopword = ENGLISH_STOP_WORDS.union(['ca', 'georgians','california', 'georgia', 'rt', 'ga'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94d7465b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4547, 7715)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vec = TfidfVectorizer(stop_words=mystopword)\n",
    "vec.fit(train['clean_text'])\n",
    "X_train = vec.transform(train['clean_text'])\n",
    "y_train = train['id']\n",
    "X_test = vec.transform(test['clean_text'])\n",
    "y_test = test['id']\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4112ed5",
   "metadata": {},
   "source": [
    "### Random Forest Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "73c0e658",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.92      0.74      0.82       979\n",
      " gavinnewsom       0.78      0.93      0.85       970\n",
      "\n",
      "    accuracy                           0.83      1949\n",
      "   macro avg       0.85      0.83      0.83      1949\n",
      "weighted avg       0.85      0.83      0.83      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(max_depth=8)\n",
    "rf.fit(X_train, y_train)\n",
    "y_pred = rf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "98c9d435",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(rf.feature_importances_, index=vec.get_feature_names()).\\\n",
    "    sort_values(ascending=False).head(30).plot(kind='bar', figsize=(15,5));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46238b89",
   "metadata": {},
   "source": [
    "### XGB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "edc4d267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.89      0.84      0.86       979\n",
      " gavinnewsom       0.85      0.89      0.87       970\n",
      "\n",
      "    accuracy                           0.87      1949\n",
      "   macro avg       0.87      0.87      0.87      1949\n",
      "weighted avg       0.87      0.87      0.87      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "xgb = XGBClassifier(max_depth=12, n_estimators=200)\n",
    "xgb.fit(X_train, 1*(y_train == 'briankempga'))\n",
    "y_pred = xgb.predict(X_test)\n",
    "y_pred = ['gavinnewsom' if x == 0 else 'briankempga' for x in y_pred]\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0dbab59",
   "metadata": {},
   "source": [
    "### Logistic Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "00511020",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "34e598c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score -  0.9025141097998974\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.93      0.88      0.90       979\n",
      " gavinnewsom       0.88      0.93      0.90       970\n",
      "\n",
      "    accuracy                           0.90      1949\n",
      "   macro avg       0.90      0.90      0.90      1949\n",
      "weighted avg       0.90      0.90      0.90      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "y_pred = lr.predict(X_test)\n",
    "print('Accuracy Score - ', accuracy_score(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "959ef4de",
   "metadata": {},
   "source": [
    "### Naive Bayes Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b211bcb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vectorize text reviews to numbers\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "nb = GaussianNB()\n",
    "\n",
    "nb.fit(X_train.todense(), y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "96b0127e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score -  0.7860441251924064\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.75      0.87      0.80       979\n",
      " gavinnewsom       0.84      0.70      0.77       970\n",
      "\n",
      "    accuracy                           0.79      1949\n",
      "   macro avg       0.79      0.79      0.78      1949\n",
      "weighted avg       0.79      0.79      0.78      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = nb.predict(X_test.todense())\n",
    "print('Accuracy Score - ', accuracy_score(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b79449e",
   "metadata": {},
   "source": [
    "### Linear SVC Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9bc01b87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# HyperTuning Parameters with Validation Set\n",
    "from sklearn.svm import LinearSVC\n",
    "lsvc = LinearSVC(verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "55daad85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC()"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lsvc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "469c6276",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score -  0.9086711133914828\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.92      0.90      0.91       979\n",
      " gavinnewsom       0.90      0.92      0.91       970\n",
      "\n",
      "    accuracy                           0.91      1949\n",
      "   macro avg       0.91      0.91      0.91      1949\n",
      "weighted avg       0.91      0.91      0.91      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = lsvc.predict(X_test)\n",
    "print('Accuracy Score - ', accuracy_score(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3d2fe7",
   "metadata": {},
   "source": [
    "### Support Vector Machines "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0e47aa9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score - 0.905079527963058\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.92      0.89      0.90       979\n",
      " gavinnewsom       0.89      0.92      0.91       970\n",
      "\n",
      "    accuracy                           0.91      1949\n",
      "   macro avg       0.91      0.91      0.91      1949\n",
      "weighted avg       0.91      0.91      0.91      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "svm = svm.SVC(kernel = 'linear')\n",
    "svm.fit(X_train, y_train)\n",
    "y_pred = svm.predict(X_test)\n",
    "print('Accuracy Score -', accuracy_score(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a111dad",
   "metadata": {},
   "source": [
    "### K Nearest Neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e2324247",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     K  Test Score  Train Score\n",
      "0    1    0.587994     0.996701\n",
      "1    2    0.586455     0.992962\n",
      "2    3    0.539251     0.587420\n",
      "3    4    0.572088     0.762041\n",
      "4    5    0.544382     0.628326\n",
      "5    6    0.550539     0.651858\n",
      "6    7    0.530528     0.579283\n",
      "7    8    0.531555     0.600616\n",
      "8    9    0.517701     0.552672\n",
      "9   10    0.525911     0.566747\n",
      "10  11    0.516162     0.537057\n",
      "11  12    0.516162     0.544975\n",
      "12  13    0.511544     0.525621\n",
      "13  14    0.513084     0.530680\n",
      "14  15    0.508979     0.518144\n",
      "15  16    0.508979     0.522322\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn_r_acc = []\n",
    "for i in range(1,17,1):\n",
    "    knn = KNeighborsClassifier(n_neighbors=i)\n",
    "    knn.fit(X_train,y_train)\n",
    "    test_score = knn.score(X_test, y_test)\n",
    "    train_score = knn.score(X_train, y_train)\n",
    "    knn_r_acc.append((i, test_score ,train_score))\n",
    "df = pd.DataFrame(knn_r_acc, columns=['K','Test Score','Train Score'])\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3a56405c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score - 0.5879938429964084\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " briankempga       0.92      0.20      0.32       979\n",
      " gavinnewsom       0.55      0.98      0.70       970\n",
      "\n",
      "    accuracy                           0.59      1949\n",
      "   macro avg       0.74      0.59      0.51      1949\n",
      "weighted avg       0.74      0.59      0.51      1949\n",
      "\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=1)\n",
    "knn.fit(X_train,y_train)\n",
    "y_pred = knn.predict(X_test)\n",
    "print('Accuracy Score -', accuracy_score(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e423bde",
   "metadata": {},
   "source": [
    "### Topic Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc9d8ce",
   "metadata": {},
   "source": [
    "### LDA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "164b1520",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "import pyLDAvis\n",
    "import pyLDAvis.sklearn\n",
    "import pyLDAvis.gensim_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e1ae288b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/linanguyen/opt/anaconda3/lib/python3.8/site-packages/ipykernel/ipkernel.py:287: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
      "  and should_run_async(code)\n"
     ]
    }
   ],
   "source": [
    "#pip install install ipython==7.10.0\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c61dd8a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_topics(model, features, no_top_words=5):\n",
    "    for topic, words in enumerate(model.components_):\n",
    "        total = words.sum()\n",
    "        largest = words.argsort()[::-1] # invert sort order\n",
    "        print(\"\\nTopic %02d\" % topic)\n",
    "        for i in range(0, no_top_words):\n",
    "            print(\"  %s (%2.2f)\" % (features[largest[i]], abs(words[largest[i]]*100.0/total)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bf1cc900",
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = TfidfVectorizer(stop_words=mystopword)\n",
    "vec.fit(df['clean_text'])\n",
    "tfidf_vals = vec.transform(df['clean_text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e8bf848f",
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_text_model = LatentDirichletAllocation(n_components=2, random_state=123)\n",
    "lda_top = lda_text_model.fit_transform(tfidf_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "165f3d48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Topic 00\n",
      "  tune (1.31)\n",
      "  vote (0.61)\n",
      "  great (0.52)\n",
      "  kemp (0.41)\n",
      "  time (0.33)\n",
      "\n",
      "Topic 01\n",
      "  state (0.49)\n",
      "  amp (0.49)\n",
      "  governor (0.48)\n",
      "  today (0.48)\n",
      "  choppin (0.42)\n"
     ]
    }
   ],
   "source": [
    "display_topics(lda_text_model, vec.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "fff8eac2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>id</th>\n",
       "      <th>briankempga</th>\n",
       "      <th>gavinnewsom</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>topic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1632</td>\n",
       "      <td>1310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1615</td>\n",
       "      <td>1939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "id     briankempga  gavinnewsom\n",
       "topic                          \n",
       "0             1632         1310\n",
       "1             1615         1939"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['topic'] = lda_top.argmax(1)\n",
    "pd.crosstab(df['topic'], df['id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "39293893",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el343531405946279312641542087368\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el343531405946279312641542087368_data = {\"mdsDat\": {\"x\": [0.08148397864474784, -0.08148397864474784], \"y\": [0.0, 0.0], \"topics\": [1, 2], \"cluster\": [1, 1], \"Freq\": [45.106938827924495, 54.8930611720755]}, \"tinfo\": {\"Term\": [\"tune\", \"vote\", \"right\", \"live\", \"kemp\", \"safe\", \"jobs\", \"covid\", \"watch\", \"update\", \"president\", \"happy\", \"great\", \"time\", \"family\", \"choppin\", \"million\", \"work\", \"mask\", \"vaccine\", \"vaccinated\", \"love\", \"law\", \"provide\", \"brian\", \"join\", \"economic\", \"climate\", \"local\", \"wear\", \"tune\", \"happy\", \"jobs\", \"right\", \"love\", \"brian\", \"ballot\", \"praying\", \"vice\", \"gtgt\", \"direction\", \"recall\", \"want\", \"friend\", \"birthday\", \"senator\", \"lost\", \"having\", \"savannah\", \"friends\", \"vote\", \"confirmed\", \"america\", \"growth\", \"unemployment\", \"republicans\", \"dalton\", \"congrats\", \"stake\", \"pence\", \"job\", \"president\", \"power\", \"climate\", \"economic\", \"kemp\", \"family\", \"republican\", \"time\", \"join\", \"great\", \"election\", \"icymi\", \"tonight\", \"big\", \"marty\", \"day\", \"honored\", \"lives\", \"thank\", \"year\", \"gt\", \"hardworking\", \"state\", \"today\", \"amp\", \"new\", \"thanks\", \"live\", \"watch\", \"safe\", \"vaccinated\", \"provide\", \"response\", \"mask\", \"local\", \"school\", \"enforcement\", \"law\", \"students\", \"testing\", \"spread\", \"vaccines\", \"covid\", \"signed\", \"administered\", \"wear\", \"vaccination\", \"vaccine\", \"billion\", \"newsom\", \"schools\", \"trafficking\", \"californians\", \"hard\", \"teachers\", \"federal\", \"tax\", \"pm\", \"million\", \"workers\", \"update\", \"health\", \"work\", \"families\", \"choppin\", \"help\", \"ensure\", \"governor\", \"support\", \"working\", \"amp\", \"today\", \"state\", \"congratulations\", \"new\", \"states\", \"proud\", \"strong\", \"week\", \"thanks\", \"lets\"], \"Freq\": [119.0, 58.0, 30.0, 39.0, 40.0, 35.0, 23.0, 34.0, 30.0, 40.0, 26.0, 19.0, 63.0, 35.0, 28.0, 52.0, 30.0, 35.0, 24.0, 25.0, 22.0, 15.0, 22.0, 21.0, 15.0, 30.0, 19.0, 18.0, 21.0, 22.0, 118.53820608737377, 19.60136391170382, 23.248317692249216, 29.354644015564038, 15.532955886968658, 15.458693829782064, 13.44032489833068, 12.626170403979579, 10.973537537464551, 11.145032390841966, 10.141288097590467, 9.392505396995906, 11.574474595967187, 10.937824354444103, 7.4509858662166675, 13.474055425067457, 8.769841096262166, 9.365407988787139, 9.170024253143172, 16.198739205958788, 54.88237414399244, 6.7257073051251774, 15.811512734490586, 7.780455337825236, 7.892061624131591, 7.4422162795586315, 5.61978241888848, 11.23022380270722, 5.646222746480605, 5.9875666392193985, 11.168650101312961, 24.347729650163075, 8.084705467127616, 17.537143489222014, 17.766760899424952, 36.77706005551474, 25.399430670779772, 15.68606108643905, 30.180496190795992, 25.30727414671116, 46.76549462748483, 21.517080419108883, 23.364506731125832, 19.177270562608047, 20.728446573296548, 12.615461528248533, 28.341744578845137, 18.57242319496991, 16.563668823297853, 22.304030849191605, 16.723144177083558, 19.431769906148194, 19.82856486092229, 28.734965835953364, 22.59912909210984, 22.054656869402415, 17.388773433799567, 16.637488031227527, 38.72948327655847, 30.55507175144467, 34.99772905018574, 21.890292094703828, 21.475116747230967, 18.42610189564223, 24.325210621150447, 21.009318758087737, 18.818898599335775, 16.567494929922027, 22.39903269865485, 17.064170533025017, 15.258434934958883, 17.075419831742177, 21.327015024523025, 33.27089602842864, 15.40841533587936, 14.524040251663108, 21.549526846171734, 13.16272945233482, 24.89175973229976, 16.612040015575438, 13.987133241269278, 12.714593676283963, 11.827721966458403, 22.635187157626945, 20.978266748150496, 10.458600127801523, 13.469052288266942, 10.527920338812264, 21.05380526994185, 29.559502906657958, 14.434565413877896, 38.211907787221676, 22.11359122694335, 33.59492362976216, 23.69593112153232, 46.626957554956995, 25.439215092708082, 21.514095160264052, 53.24520625215771, 35.07366520159545, 29.236914171600088, 54.092537557461405, 53.083583538606526, 54.48188693318265, 25.10753114757055, 33.48766372323385, 25.213778732850944, 25.290409030971393, 22.65692692703516, 21.739510500358815, 23.296247818180362, 22.755202219087828], \"Total\": [119.0, 58.0, 30.0, 39.0, 40.0, 35.0, 23.0, 34.0, 30.0, 40.0, 26.0, 19.0, 63.0, 35.0, 28.0, 52.0, 30.0, 35.0, 24.0, 25.0, 22.0, 15.0, 22.0, 21.0, 15.0, 30.0, 19.0, 18.0, 21.0, 22.0, 119.62384210431183, 19.997056896614925, 23.77378420835888, 30.03157786694579, 15.907820205099213, 15.887112755975595, 13.863365940310628, 13.03796691521348, 11.339850004872558, 11.526908517200185, 10.553673337860277, 9.775862236982517, 12.10295869273402, 11.470941857674896, 7.816598492290418, 14.141543512843153, 9.212734733612448, 9.87719872184568, 9.690346502139683, 17.138265976277197, 58.110594342850106, 7.136054674212117, 16.780538777991637, 8.262606505801923, 8.382373735499439, 7.920406832070255, 5.985070218220622, 11.961960332911955, 6.015094233839629, 6.385641493534964, 11.928113898689297, 26.258519045250985, 8.625080750168802, 18.895085415088076, 19.20386316840368, 40.86309360064531, 28.712506696114904, 17.321058067200678, 35.9528708596325, 30.467283207718445, 63.12784894294601, 25.845411829181106, 28.924178718380745, 22.889922800952075, 26.19648804343617, 14.109075653467775, 47.28321511200818, 25.53307446637455, 21.425037586137705, 35.88389917796633, 23.32116647025164, 32.2502439402643, 34.62636565275336, 83.21685276913601, 75.68271263071637, 76.14719442686382, 50.87643715703342, 39.93373584940789, 39.23686540609463, 30.974907861059506, 35.545278619019044, 22.274612445990144, 21.862719076255537, 18.78505006568829, 24.85099503366865, 21.465472938634722, 19.228919385985076, 16.940654228824656, 22.904967043139983, 17.449950445002568, 15.623326950756468, 17.484947770719177, 21.84514497693297, 34.08092728998675, 15.786017553581049, 14.884661381014723, 22.10306680534861, 13.522587748926453, 25.57570918830559, 17.077438274202915, 14.381061420119982, 13.086480728153383, 12.216150604034707, 23.400877887297227, 21.722098508630072, 10.83161945203408, 13.953174978750342, 10.906352732131193, 21.8761828396153, 30.831463014489326, 14.962253778111487, 40.56830055581545, 23.190304827771083, 35.74582663458194, 25.000800739720162, 52.19990842950919, 27.442191899281653, 22.985621812198218, 65.85983939852638, 41.161295514112076, 34.226835458818876, 76.14719442686382, 75.68271263071637, 83.21685276913601, 29.038190878695247, 50.87643715703342, 31.95285031858597, 33.685073960748326, 26.07061567784855, 24.11844528156284, 39.93373584940789, 37.71845548989812], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -4.3361, -6.1358, -5.9651, -5.7319, -6.3684, -6.3732, -6.5131, -6.5756, -6.7159, -6.7004, -6.7948, -6.8715, -6.6626, -6.7191, -7.103, -6.5106, -6.9401, -6.8744, -6.8954, -6.3264, -5.1062, -7.2054, -6.3506, -7.0598, -7.0455, -7.1042, -7.3851, -6.6928, -7.3804, -7.3217, -6.6983, -5.9189, -7.0214, -6.2471, -6.234, -5.5065, -5.8766, -6.3586, -5.7042, -5.8803, -5.2662, -6.0425, -5.9602, -6.1576, -6.0799, -6.5765, -5.767, -6.1897, -6.3042, -6.0066, -6.2946, -6.1445, -6.1242, -5.7533, -5.9935, -6.0178, -6.2555, -6.2997, -5.6511, -5.8882, -5.7524, -6.2217, -6.2408, -6.394, -6.1162, -6.2628, -6.3729, -6.5003, -6.1987, -6.4707, -6.5826, -6.4701, -6.2477, -5.803, -6.5728, -6.6319, -6.2374, -6.7303, -6.0932, -6.4976, -6.6696, -6.765, -6.8373, -6.1882, -6.2642, -6.9603, -6.7073, -6.9537, -6.2606, -5.9213, -6.6381, -5.6646, -6.2115, -5.7933, -6.1424, -5.4655, -6.0714, -6.239, -5.3328, -5.7503, -5.9323, -5.317, -5.3359, -5.3099, -6.0846, -5.7965, -6.0803, -6.0773, -6.1873, -6.2286, -6.1594, -6.1829], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.787, 0.7761, 0.7738, 0.7733, 0.7723, 0.7688, 0.7651, 0.764, 0.7633, 0.7624, 0.7563, 0.7561, 0.7515, 0.7485, 0.7482, 0.7478, 0.7469, 0.7429, 0.7409, 0.7398, 0.739, 0.7369, 0.7367, 0.736, 0.7359, 0.7339, 0.7332, 0.733, 0.7328, 0.7318, 0.7303, 0.7206, 0.7314, 0.7216, 0.7184, 0.6908, 0.6735, 0.697, 0.6211, 0.6106, 0.4961, 0.6128, 0.5827, 0.6192, 0.562, 0.6842, 0.2843, 0.4778, 0.5388, 0.3206, 0.4636, 0.2895, 0.2386, -0.2672, -0.4125, -0.443, -0.2774, -0.0794, 0.5868, 0.5861, 0.5843, 0.5824, 0.5819, 0.5805, 0.5784, 0.5783, 0.5782, 0.5775, 0.5774, 0.5774, 0.5762, 0.5761, 0.5758, 0.5757, 0.5756, 0.5753, 0.5744, 0.5728, 0.5727, 0.5722, 0.572, 0.571, 0.5675, 0.5665, 0.5649, 0.5647, 0.5645, 0.5645, 0.5615, 0.5577, 0.5639, 0.5399, 0.5522, 0.5377, 0.5462, 0.4869, 0.524, 0.5336, 0.3872, 0.4397, 0.4422, 0.2578, 0.2451, 0.1762, 0.4543, 0.1816, 0.3629, 0.3132, 0.4594, 0.4959, 0.0609, 0.0944]}, \"token.table\": {\"Topic\": [2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], \"Freq\": [1.0077488238417294, 0.9534854757455496, 0.05959284223409685, 0.28891412435595476, 0.709152850691889, 0.9377232092099501, 0.8016341719233541, 0.19086527902937003, 0.9954654630888116, 0.8955301985773176, 0.9441614867596425, 0.04273343952377245, 0.9828691090467663, 0.11494273037092403, 0.900384721238905, 0.9526286653156204, 0.05292381473975669, 0.9809341883682893, 0.9195817151921803, 0.08359833774474366, 0.13774962829845994, 0.8609351768653746, 0.029341924634011005, 0.9682835129223631, 1.0024945040300324, 0.5921763131731083, 0.40183392679603774, 0.9475373815225049, 0.937311406676527, 0.052072855926473725, 0.851214913710936, 0.1547663479474429, 1.0035031569840065, 0.04350545781055664, 0.957120071832246, 0.039998718857482206, 0.959969252579573, 0.8707007111776401, 0.10448408534131681, 0.9316875922360354, 0.9589447960317398, 0.08717679963924907, 0.9335833638098052, 0.058348960238112826, 0.19738888097396237, 0.8047392839707697, 0.7445208539020217, 0.25345390771132653, 0.9682174740358841, 0.5891428305222391, 0.40309772614679523, 0.9542888263219974, 1.0001471768270846, 0.04603606781373841, 0.9667574240885066, 0.5775945474777159, 0.43319591060828694, 0.9111895238165498, 0.1012432804240611, 0.0431214685372514, 0.9486723078195308, 0.07288047570472508, 0.9110059463090635, 0.7441328706819776, 0.2741542155144128, 0.795182474286952, 0.2074389063357266, 0.9221910599972322, 0.08383555090883929, 0.9674522069529504, 0.04206313943273698, 0.8205523226195177, 0.16411046452390354, 0.9054625271791878, 0.09788784077612842, 0.04365865264580239, 0.9604903582076526, 0.39768330397349777, 0.6097810660926966, 0.025486235703341145, 0.9939631924303046, 0.7934641856124086, 0.23337181929776726, 0.9783152721598349, 0.9769086227093579, 1.005794621369384, 0.9213927488442389, 0.07087636529571069, 0.04023983742482661, 0.9657560981958387, 0.032434399870354756, 0.9730319961106426, 0.33414289502089933, 0.6486303256288045, 0.9735025524898424, 0.9396080262373953, 0.04571181395454022, 0.9599480930453447, 0.9275275480572668, 0.11594094350715835, 0.9970879727291548, 0.9139890927832256, 0.07616575773193547, 0.23749391226874056, 0.7421684758398143, 0.9605392598584633, 0.9206349048120384, 0.9237310987541664, 0.1154663873442708, 0.8837929854381386, 0.9582087850209026, 0.9656502275199734, 0.033298283707585294, 0.028133131567716414, 0.9846596048700745, 0.9287593583999034, 0.10319548426665594, 0.9880950467683627, 0.9933915977908916, 0.9192773043616901, 0.07071363879705309, 0.9502079893859777, 0.9722648430479566, 0.9974906072535469, 0.34848710369344443, 0.6489070206705517, 0.21907278787984433, 0.7824028138565868, 0.1150720810383091, 0.8822192879603697, 0.9742148009863588, 0.1457680066931545, 0.8503133723767347, 1.0085864880926612, 0.9232229810402074, 0.9601028031531859, 0.6130883349908804, 0.39014712226692394, 0.4257052248782295, 0.5759541277764282, 0.8344257157412062, 0.16688514314824124, 0.303900312244692, 0.7002920238682033, 0.8300595928270113, 0.1747493879635813, 0.9823061608324215, 0.994784968503454, 0.008359537550449193, 0.9543835973478393, 0.04929957559470163, 0.936691936299331, 0.9876715050977428, 0.9613544568074301, 0.039099600039917824, 0.9774900009979457, 0.0457767618871806, 0.9613119996307926, 0.9700304673583399, 0.9464711318473576, 0.05162569810076496, 0.9914930972377992, 0.0826244247698166, 1.000810079534475, 0.04524259048785099, 0.9953369907327217, 0.0829240847265095, 0.9121649319916044, 0.05595058747543749, 0.9511599870824373, 0.06683485087406521, 0.9356879122369129, 0.14608420360731017, 0.847288380922399, 0.7289515308629657, 0.30015651270828003], \"Term\": [\"administered\", \"america\", \"america\", \"amp\", \"amp\", \"ballot\", \"big\", \"big\", \"billion\", \"birthday\", \"brian\", \"californians\", \"californians\", \"choppin\", \"choppin\", \"climate\", \"climate\", \"confirmed\", \"congrats\", \"congrats\", \"congratulations\", \"congratulations\", \"covid\", \"covid\", \"dalton\", \"day\", \"day\", \"direction\", \"economic\", \"economic\", \"election\", \"election\", \"enforcement\", \"ensure\", \"ensure\", \"families\", \"families\", \"family\", \"family\", \"federal\", \"friend\", \"friend\", \"friends\", \"friends\", \"governor\", \"governor\", \"great\", \"great\", \"growth\", \"gt\", \"gt\", \"gtgt\", \"happy\", \"hard\", \"hard\", \"hardworking\", \"hardworking\", \"having\", \"having\", \"health\", \"health\", \"help\", \"help\", \"honored\", \"honored\", \"icymi\", \"icymi\", \"job\", \"job\", \"jobs\", \"jobs\", \"join\", \"join\", \"kemp\", \"kemp\", \"law\", \"law\", \"lets\", \"lets\", \"live\", \"live\", \"lives\", \"lives\", \"local\", \"lost\", \"love\", \"marty\", \"marty\", \"mask\", \"mask\", \"million\", \"million\", \"new\", \"new\", \"newsom\", \"pence\", \"pm\", \"pm\", \"power\", \"power\", \"praying\", \"president\", \"president\", \"proud\", \"proud\", \"provide\", \"recall\", \"republican\", \"republican\", \"republicans\", \"response\", \"right\", \"right\", \"safe\", \"safe\", \"savannah\", \"savannah\", \"school\", \"schools\", \"senator\", \"senator\", \"signed\", \"spread\", \"stake\", \"state\", \"state\", \"states\", \"states\", \"strong\", \"strong\", \"students\", \"support\", \"support\", \"tax\", \"teachers\", \"testing\", \"thank\", \"thank\", \"thanks\", \"thanks\", \"time\", \"time\", \"today\", \"today\", \"tonight\", \"tonight\", \"trafficking\", \"tune\", \"tune\", \"unemployment\", \"update\", \"update\", \"vaccinated\", \"vaccination\", \"vaccine\", \"vaccine\", \"vaccines\", \"vaccines\", \"vice\", \"vote\", \"vote\", \"want\", \"want\", \"watch\", \"wear\", \"wear\", \"week\", \"week\", \"work\", \"work\", \"workers\", \"workers\", \"working\", \"working\", \"year\", \"year\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 2]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el343531405946279312641542087368\", ldavis_el343531405946279312641542087368_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el343531405946279312641542087368\", ldavis_el343531405946279312641542087368_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el343531405946279312641542087368\", ldavis_el343531405946279312641542087368_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lda_display = pyLDAvis.sklearn.prepare(lda_text_model, tfidf_vals, vec, sort_topics=False)\n",
    "pyLDAvis.display(lda_display)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2784193d",
   "metadata": {},
   "source": [
    "### LSA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "25ff1ca2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import TruncatedSVD\n",
    "svd_text_model = TruncatedSVD(n_components = 5, random_state=42)\n",
    "W_svd_text_matrix = svd_text_model.fit_transform(tfidf_vals)\n",
    "H_svd_text_matrix = svd_text_model.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f255bfb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Topic 00\n",
      "  tune (37.57)\n",
      "  update (6.17)\n",
      "  pm (1.74)\n",
      "  live (1.44)\n",
      "  tonight (1.18)\n",
      "\n",
      "Topic 01\n",
      "  today (0.96)\n",
      "  governor (0.94)\n",
      "  state (0.89)\n",
      "  vote (0.81)\n",
      "  amp (0.79)\n",
      "\n",
      "Topic 02\n",
      "  update (6.78)\n",
      "  live (5.07)\n",
      "  watch (5.01)\n",
      "  response (4.47)\n",
      "  governor (4.44)\n",
      "\n",
      "Topic 03\n",
      "  choppin (6.68)\n",
      "  lets (2.21)\n",
      "  update (1.56)\n",
      "  thanks (1.06)\n",
      "  watch (1.05)\n",
      "\n",
      "Topic 04\n",
      "  vote (16.45)\n",
      "  election (3.57)\n",
      "  day (3.10)\n",
      "  early (2.63)\n",
      "  kemp (2.36)\n"
     ]
    }
   ],
   "source": [
    "# call display_topics on your model\n",
    "display_topics(svd_text_model, vec.get_feature_names())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7535c429",
   "metadata": {},
   "source": [
    "### Non-Negative Matrix Factorization Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5137c7d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/linanguyen/opt/anaconda3/lib/python3.8/site-packages/sklearn/decomposition/_nmf.py:312: FutureWarning: The 'init' value, when 'init=None' and n_components is less than n_samples and n_features, will be changed from 'nndsvd' to 'nndsvda' in 1.1 (renaming of 0.26).\n",
      "  warnings.warn((\"The 'init' value, when 'init=None' and \"\n"
     ]
    }
   ],
   "source": [
    "from sklearn.decomposition import NMF, TruncatedSVD, LatentDirichletAllocation\n",
    "\n",
    "nmf_text_model = NMF(n_components=5, random_state=314)\n",
    "W_text_matrix = nmf_text_model.fit_transform(tfidf_vals)\n",
    "H_text_matrix = nmf_text_model.components_\n",
    "\n",
    "warnings.filterwarnings(\"ignore\", category= FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7550f32a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Topic 00\n",
      "  tune (64.32)\n",
      "  update (6.68)\n",
      "  tonight (1.93)\n",
      "  pm (1.49)\n",
      "  announcement (1.26)\n",
      "\n",
      "Topic 01\n",
      "  state (1.22)\n",
      "  amp (1.08)\n",
      "  great (0.68)\n",
      "  new (0.57)\n",
      "  fight (0.45)\n",
      "\n",
      "Topic 02\n",
      "  update (7.64)\n",
      "  live (6.33)\n",
      "  governor (6.16)\n",
      "  watch (6.05)\n",
      "  response (5.28)\n",
      "\n",
      "Topic 03\n",
      "  choppin (16.42)\n",
      "  lets (5.31)\n",
      "  thanks (3.83)\n",
      "  support (3.15)\n",
      "  strong (2.12)\n",
      "\n",
      "Topic 04\n",
      "  vote (8.95)\n",
      "  election (2.02)\n",
      "  day (1.90)\n",
      "  early (1.50)\n",
      "  kemp (1.45)\n"
     ]
    }
   ],
   "source": [
    "display_topics(nmf_text_model, vec.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7b6fb9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b89b8b1b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fac646a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe8b8695",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cc877fd9",
   "metadata": {},
   "source": [
    "# The following codes are not needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c09d9ba7",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "get_user() takes 1 positional argument but 2 were given",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-41-6c0605309a94>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"briankempga\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0muser_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_user\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tweepy/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'payload_list'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayload_list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'payload_type'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayload_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpayload_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayload_list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpayload_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayload_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: get_user() takes 1 positional argument but 2 were given"
     ]
    }
   ],
   "source": [
    "handle = \"briankempga\"\n",
    "user_obj = api.get_user(handle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81619cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#client = tweepy.Client(bearer_token,wait_on_rate_limit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "085aff53",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "followers = api.get_users_followers(\n",
    "    # Learn about user fields here: \n",
    "    # https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user\n",
    "    user_obj.data.id, user_fields=[\"created_at\",\"description\",\"location\",\n",
    "                                   \"public_metrics\"],  max_results=1000\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3aeb026b",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_data_pd = defaultdict(list)\n",
    "for idx, user in enumerate(followers.data) :\n",
    "    follower_data_pd[idx] = user\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03258187",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_data_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "810561d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_bk = (pd.concat({k: pd.Series(v) for k, v in follower_data_pd.items()}, axis = 1)).T\n",
    "follower_bk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60eef3bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# handle_followers = []\n",
    "# pulls = 0\n",
    "# max_pulls = 10\n",
    "# next_token = None\n",
    "\n",
    "# while True :\n",
    "\n",
    "#     followers = client.get_users_followers(\n",
    "#         user_obj.data.id, \n",
    "#         max_results=1000, # when you do this for real, set this to 1000!\n",
    "#         pagination_token = next_token,\n",
    "#         user_fields=[\"created_at\",\"description\",\"location\",\n",
    "#                      \"entities\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\n",
    "#                      \"verified\",\"public_metrics\"]\n",
    "#     )\n",
    "#     pulls += 1\n",
    "    \n",
    "#     for follower in followers.data : \n",
    "#         follower_row = (follower.id,follower.name,follower.created_at,follower.description)\n",
    "#         handle_followers.append(follower_row)\n",
    "    \n",
    "#     if 'next_token' in followers.meta and pulls < max_pulls :\n",
    "#         next_token = followers.meta['next_token']\n",
    "#     else : \n",
    "#         break "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03c27fef",
   "metadata": {},
   "outputs": [],
   "source": [
    "response = client.get_user(id=user_obj.data.id,\n",
    "                          user_fields=[\"created_at\",\"description\",\"location\",\n",
    "                                       \"entities\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\n",
    "                                       \"verified\",\"public_metrics\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07f051c5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for field, value in response.data.items() :\n",
    "    print(f\"for {field} we have {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bf48305",
   "metadata": {},
   "outputs": [],
   "source": [
    "# printing information about Brian Kemp, twitter user\n",
    "userbriankemp = api.get_user(screen_name = \"briankempga\")\n",
    "pprint(userbriankemp._json)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1616d90",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "625d7045",
   "metadata": {},
   "outputs": [],
   "source": [
    "handle_2 = \"gavinnewsom\"\n",
    "user_obj_gavin = client.get_user(username=handle_2)\n",
    "\n",
    "followers_gavin = client.get_users_followers(\n",
    "    # Learn about user fields here: \n",
    "    # https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user\n",
    "    user_obj_gavin.data.id, user_fields=[\"created_at\",\"description\",\"location\",\n",
    "                                   \"public_metrics\"],  max_results=1000\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "484ac80b",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_data_2_pd = defaultdict(list)\n",
    "for idx, user in enumerate(followers_gavin.data) :\n",
    "    follower_data_2_pd[idx] = user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c6006fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_data_2_pd \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88d2bfdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "follower_gn = (pd.concat({k: pd.Series(v) for k, v in follower_data_2_pd.items()}, axis = 1)).T\n",
    "follower_gn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79e7f003",
   "metadata": {},
   "outputs": [],
   "source": [
    "response_gavin = client.get_user(id=user_obj_gavin.data.id,\n",
    "                          user_fields=[\"created_at\",\"description\",\"location\",\n",
    "                                       \"entities\",\"name\",\"pinned_tweet_id\",\"profile_image_url\",\n",
    "                                       \"verified\",\"public_metrics\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c5c2d0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for field, value in response_gavin.data.items() :\n",
    "    print(f\"for {field} we have {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff1e3e06",
   "metadata": {},
   "outputs": [],
   "source": [
    "usergavinnew = api.get_user(screen_name = \"gavinnewsom\")\n",
    "pprint(usergavinnew._json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2858be86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add any additional import statements you need here\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f23c0562",
   "metadata": {},
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6caf3c9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "punctuation = set(punctuation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f45939e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pairing description with govenor name\n",
    "\n",
    "gn_des = follower_gn[['description']]\n",
    "gn_des['govenor'] = 'gavinnewsom'\n",
    "\n",
    "bk_des = follower_bk[['description']]\n",
    "bk_des['govenor'] = 'briankemp'\n",
    "\n",
    "gn_bk_df = gn_des.append(bk_des)\n",
    "\n",
    "gn_bk_df = gn_bk_df.replace(\"\\n\", \" \")\n",
    "gn_bk_df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6056a89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# preparing tokens\n",
    "tokens = gn_bk_df['description'].str.lower()\n",
    "tokens = tokens.str.replace('[{}]'.format(punctuation), '')\n",
    "tokens = tokens.str.replace('•', '')\n",
    "gn_bk_df['tokens'] = tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8dad171a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop empty rows\n",
    "filter = gn_bk_df['tokens'] != \"\"\n",
    "gn_bk_df1 = gn_bk_df[filter]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f60826a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gn_bk_df1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba01f871",
   "metadata": {},
   "source": [
    "### Descriptive Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2957aae2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "from string import punctuation\n",
    "\n",
    "def descriptive_stats(tokens, top_num_tokens = 5, verbose=True) :\n",
    "    \"\"\"\n",
    "        Given a list of tokens, print number of tokens, number of unique tokens, \n",
    "        number of characters, lexical diversity (https://en.wikipedia.org/wiki/Lexical_diversity), \n",
    "        and num_tokens most common tokens. Return a list with the number of tokens, number\n",
    "        of unique tokens, lexical diversity, and number of characters. \n",
    "    \"\"\"\n",
    "\n",
    "    # Fill in the correct values here. \n",
    "    \n",
    "    num_tokens = len(tokens)\n",
    "    num_unique_tokens = len(set(tokens))\n",
    "    lexical_diversity = num_unique_tokens/num_tokens\n",
    "    num_characters = len(\"\".join(tokens))\n",
    "\n",
    "    if verbose :        \n",
    "        print(f\"There are {num_tokens} tokens in the data.\")\n",
    "        print(f\"There are {num_unique_tokens} unique tokens in the data.\")\n",
    "        print(f\"There are {num_characters} characters in the data.\")\n",
    "        print(f\"The lexical diversity is {lexical_diversity:.3f} in the data.\")\n",
    "    \n",
    "        # print the five most common tokens\n",
    "        \n",
    "        # use a list comprehension on a set to exclude repeating\n",
    "        # tokens and empty strings\n",
    "        unique_tokens = [token for token in set(tokens) if token]\n",
    "        # use a unique tokens to check frequency of tokens in \n",
    "        # original list\n",
    "        counts = [tokens.count(token) for token in unique_tokens]\n",
    "        result = []\n",
    "        \n",
    "        # iterate over the range of tokens to locate and find the\n",
    "        # maximum count, then mutate both unique_tokens and counts\n",
    "        # based on the associated position\n",
    "        for _ in range(top_num_tokens):\n",
    "            max_count = max(counts)\n",
    "            max_count_pos = counts.index(max_count)\n",
    "            most_common = unique_tokens.pop(max_count_pos)\n",
    "            result.append(most_common)\n",
    "            counts.pop(max_count_pos)\n",
    "\n",
    "        print(result)\n",
    "            \n",
    "    return([num_tokens, num_unique_tokens,\n",
    "            lexical_diversity,\n",
    "            num_characters])\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b358c56",
   "metadata": {},
   "outputs": [],
   "source": [
    "descriptive_stats(gn_bk_df1.loc[gn_bk_df1['govenor'] == 'gavinnewsom']['tokens'], verbose = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e08f3b49",
   "metadata": {},
   "outputs": [],
   "source": [
    "descriptive_stats(gn_bk_df1.loc[gn_bk_df1['govenor'] == 'briankemp']['tokens'], verbose = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d278a9fd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "eb6ab0aca1cb3b88d28e39c0cd72da93ec1cda217f19bc0f068025ef404b92a3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
